name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      id: bump
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Bump version based on input
        VERSION_TYPE="${{ inputs.version_type }}"
        NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
        NEW_VERSION=${NEW_VERSION#v}
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # First release
          COMMITS=$(git log --oneline --no-merges)
        else
          # Get commits since last tag
          COMMITS=$(git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD)
        fi
        
        # Create changelog
        CHANGELOG="## What's Changed\n\n"
        CHANGELOG+="### Features\n"
        echo "$COMMITS" | grep -i "feat:" | sed 's/^/- /' >> temp_changelog.txt || true
        CHANGELOG+=$(cat temp_changelog.txt 2>/dev/null || echo "- Initial release\n")
        
        CHANGELOG+="\n### Fixes\n"
        echo "$COMMITS" | grep -i "fix:" | sed 's/^/- /' >> temp_changelog.txt || true
        CHANGELOG+=$(cat temp_changelog.txt 2>/dev/null || echo "- No fixes in this release\n")
        
        CHANGELOG+="\n### Other Changes\n"
        echo "$COMMITS" | grep -v -i "feat:\|fix:" | sed 's/^/- /' >> temp_changelog.txt || true
        CHANGELOG+=$(cat temp_changelog.txt 2>/dev/null || echo "- No other changes\n")
        
        # Add custom release notes if provided
        if [ -n "${{ inputs.release_notes }}" ]; then
          CHANGELOG+="\n### Release Notes\n${{ inputs.release_notes }}\n"
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Clean up
        rm -f temp_changelog.txt

    - name: Commit version bump
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.bump.outputs.version }}"
        git push

    - name: Create Git tag
      run: |
        git tag -a v${{ steps.bump.outputs.version }} -m "Release v${{ steps.bump.outputs.version }}"
        git push origin v${{ steps.bump.outputs.version }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump.outputs.version }}
        release_name: Release v${{ steps.bump.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Update CHANGELOG.md
      run: |
        # Create or update CHANGELOG.md
        RELEASE_DATE=$(date +"%Y-%m-%d")
        RELEASE_HEADER="## [${{ steps.bump.outputs.version }}] - $RELEASE_DATE"
        
        if [ -f CHANGELOG.md ]; then
          # Add new release at the top
          sed -i "1i $RELEASE_HEADER\n${{ steps.changelog.outputs.changelog }}\n" CHANGELOG.md
        else
          # Create new CHANGELOG.md
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$RELEASE_HEADER" >> CHANGELOG.md
          echo "${{ steps.changelog.outputs.changelog }}" >> CHANGELOG.md
        fi
        
        git add CHANGELOG.md
        git commit -m "docs: update changelog for v${{ steps.bump.outputs.version }}"
        git push

    - name: Success message
      run: |
        echo "🎉 Successfully released version ${{ steps.bump.outputs.version }}!"
        echo "📝 Release notes: ${{ steps.changelog.outputs.changelog }}"
