name: Manual Cron Trigger

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'What to generate'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - exercises
          - foods
      environment:
        description: 'Environment to run against'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  trigger-cron:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Execute AI Generation
        run: |
          echo "🚀 Executing AI generation..."
          echo "Action: ${{ inputs.action }}"

          # Create a simple script to run the AI functions
          cat > generate.js << 'EOF'
          const { generateAndInsertExercise, generateAndInsertFood, generateAll } = require('./dist/utils/ai.js');

          async function main() {
            const action = process.argv[2];
            
            try {
              let result;
              switch (action) {
                case 'exercises':
                  console.log('📝 Generating exercise...');
                  result = await generateAndInsertExercise();
                  console.log('Exercise result:', result);
                  if (!result.success) {
                    console.error('❌ Exercise generation failed:', result.error);
                    process.exit(1);
                  }
                  break;
                case 'foods':
                  console.log('📝 Generating food...');
                  result = await generateAndInsertFood();
                  console.log('Food result:', result);
                  if (!result.success) {
                    console.error('❌ Food generation failed:', result.error);
                    process.exit(1);
                  }
                  break;
                case 'all':
                  console.log('📝 Generating both...');
                  result = await generateAll();
                  console.log('All results:', result);
                  if (!result.exercise.success || !result.food.success) {
                    console.error('❌ Generation failed:');
                    if (!result.exercise.success) console.error('  Exercise:', result.exercise.error);
                    if (!result.food.success) console.error('  Food:', result.food.error);
                    process.exit(1);
                  }
                  break;
                default:
                  console.error('Unknown action:', action);
                  process.exit(1);
              }
              console.log('✅ AI generation completed successfully!');
            } catch (error) {
              console.error('❌ Error during AI generation:', error);
              process.exit(1);
            }
          }

          main();
          EOF

          # Execute the generation
          node generate.js ${{ inputs.action }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Show Results
        run: |
          echo "✅ AI generation completed successfully!"
          echo "Check your Supabase database for new data"
